Decisional constructs | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
Many functional languages use pattern matching as a decisional construct. Generally this takes the form of specifying non-disjoint base and inductive cases for recursive functions, though it
is also used to exhaustively enumerate the possibilities of a data structure, at least within the type space.

Havoc is in a strange place with respect to pattern matching because multiple matching equations within a scope are considered to be ambiguous. In particular, consider this fairly normal
overlapping definition of factorial:

| fact n = n * fact (n - 1) âˆ€ n
  fact 0 = 1

Havoc won't realize that you're still talking about the same 'fact' constant because of ambiguity sets. In order for this to work out, you need to consolidate any decision-making into a single
equation (which is arguably where it belongs in any case, but Havoc forces the issue).
