Discoverable reductions | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
I've complained in other notes that it's hard to optimize certain forms in the general case. And this is certainly the case if the compiler is uninsightful. However, with a little bit of
heuristic analysis the compiler should be able to reduce most optimization cases to tractable problems. Here's one of the programs I complained about, claiming that optimizing it would end up
being O(n^3) in the number of equations:

| list n = n > 0 ? cons n $ list $ n - 1 : nil ∀ n
  cons n $ cons (n - 1) $ cons (n - 2) x = cons 10 x ∀ n x

Induction analysis.
This is the first step towards solving this problem. The key is to observe the inductive case of 'list n':

| list n = cons n $ list $ n - 1
         = cons n $ cons (n - 1) $ list (n - 1 - 1)
         = cons n $ cons (n - 1) $ cons (n - 2) $ list (n - 3)
         ...

It's easy for a human to see that this matches the second equation. It's only trivially more difficult for the Havoc compiler to see this too, since it's a straightforward expansion.
Therefore, any recursive relation can be expanded a fixed number of times with an abstract value to produce concrete terms.

Fixed-element analysis.
This is the other side of the problem. The term 'cons n $ cons (n - 1) $ cons (n - 2) x' involves three instances of 'cons', which is a constant. (Let's ignore ambiguity sets for this
example.) There are three occurrences of 'cons' here, so this is a third-order fixed element analysis. This means that we want to find all inductive definitions that generate 'cons' terms and
iterate them three times with abstract values.

Reduction.
Actually incorporating the optimization into the original recursive definition is highly nontrivial. Most of this has to do with a sort of ambiguity; my example above is problematic because it
isn't well-defined. For example:

| list 4 = cons 4 $ cons 3 $ cons 2 $ cons 1 nil
         = cons 10 $ cons 1 nil                         Applying the cons reduction to cons 4 $ cons 3 $ cons 2 x
         = cons 4 $ cons 10 nil                         Applying it to cons 3 $ cons 2 $ cons 1 x

I'm tempted to say that reductions that can't be applied directly to the function definition are not well-defined in general, but this fails due to point-ful composition. For example:

| f x = x + 1 ∀ x
  g x = x * 2 ∀ x
  2 * x + 2 = 5 ∀ x
  g $ f y = 5                                           This is discoverable only by applying both g and f
