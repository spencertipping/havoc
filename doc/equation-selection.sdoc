Efficient equation selection | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
Havoc has a number of performance bottlenecks, one of the more significant ones being deciding which equation to use for a given value. Without some sort of optimization this process would be
O(nk), where n is the number of equations and k is the average complexity of the equations' patterns. Some of this can be ameliorated by building lookup tables; if, for instance, the
expression has a (+) node at its root, then only equations with that node should be considered. However, this is still quite slow.

Better is to do a couple of things to constrain the value space. First, we know the initial values at compile-time and runtime. Therefore, we can do flow analysis across the transitive closure
of equality to find a reasonably complete set of possibilities. The trouble with this comes in when we have functions that involve fixed points, especially divergent ones. An example of a
divergent fixed point is this improperly-written Fibonacci function:

| fib n = fib (n - 1) + fib (n - 2) ∀ n                 / Divergent because there is no base case; fixed point because its expansion references its left-hand side

Differentiating between shape and value.
Equation patterns contain enough information to discriminate on the shape of a value, but not necessarily the runtime properties of that value. In this sense, equations are mappings between
types that can be erased at compile-time. For example, consider this short program:

| f x = x + 1 ∀ x
  g x = x * 2 ∀ x
  main argv kernel = exit $ kernel print $ f $ g 10

Here, 'f' and 'g' refer to type signatures more than they do values; in particular, the execution path is known at compile-time. These equations can be erased like this:

| main argv kernel = exit $ kernel print $ 10 * 2 + 1

This isn't always possible. For instance, suppose we define an equation that conditionally expands into one of two values:

| misbehaving x = foo x ← x > 0 ∀ x
                  bar x ↤
  main argv kernel = exit $ kernel print $ misbehaving $ kernel read-integer

Either 'foo x' or 'bar x' will be printed, where 'x' is the integer read from stdin. However, we don't know which it will be. This matters when we have other equations that will either match
or fail depending on that outcome:

| foo x = x + 1 ∀ x
  bar x = x + 2 ∀ x

This is inconvenient from an optimization perspective because it requires that we encode the type tag along with the value (thus requiring more space). Depending on the situation, Havoc may or
may not be able to optimize this away. Cases when it can't are when the number of branches becomes too large, or when an equation is recursive and doesn't converge within a known number of
iterations.

Detecting higher-order shape convergence.
Suppose we have these three equations:

| f x = x + 1 ∀ x
  g x = x * x ∀ x
  x * x + 1 = c ∀ x

Havoc needs to realize that if f and g are applied in the right order, the third equation's left-hand side will match. This is solvable provided that all rules are known at compile-time.

Recursive inference rules.
Let's suppose we add some compile-time inference rule such as '(x = y) = (x + 1 = y + 1) ∀ x and y'. This is a problem because this rule is triggered for every single equation and is
divergent, yet it represents a valid logical conclusion and could be useful. I'm not sufficiently imaginative to figure out how to make this work, so I'm compromising by adding a tag to the
equation to prevent divergence:

| 1+ (x = y) = (x + 1 = y + 1) ∀ x and y

This makes it possible to direct Havoc's equation expander and thus indirectly work with recursive inference rules.
