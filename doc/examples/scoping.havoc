Invariant scoping | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
You can imagine the problem that would arise if all equivalences lived at the toplevel. You'd write something that made local sense, like 'x = x + 0', and notice that all of your strings had
"0" appended to them (or something similarly inconvenient). To fix this, Havoc has scoping operators that limit the visibility of some equations.

A scoping operation is generally of the form 'equation wh equations' (here 'wh' is short for 'where'). For example:

| integrate (x ^ n) dx = factor * x ^ (n + 1) + C wh factor = 1.0 / (n + 1)

If you have Unicode enabled, you can write it even more concisely by replacing 'wh' with '⋅', as in 'x = y ⋅ y = 10'. ⋅ and wh behave exactly the same way and have equal precedence.

In addition to introducing new equivalences, 'wh' lets you restrict when your equivalence is valid. For example, here's a more correct definition of the integrate function above:

| integrate (x ^ n /integer) dx = factor * x ^ (n + 1) + C wh ¬ n < 0 and factor = 1.0 / (n + 1)

This definition both requires that n be an integer in order for the match to happen, and it further requires that n is nonnegative. The statement '¬ n < 0' is called a forcing expression, and
it is covered in more detail in forcing-expressions.havoc.
