Equation laziness | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
Languages can generally be divided into strict and lazy, and this is also true of term rewriting languages such as Havoc. Havoc generally tries to be as lazy as possible, but this can cause
problems with transitive closure. Specifically, consider things like '(x = y) = (x + z - z = y) âˆ€ x, y, and z', which might be necessary to establish some other equivalence later on. However,
this rule applies to its own expansion; therefore, Havoc is not at liberty to rewrite equations simply because they exist. It must have a good reason to do so.

Eager evaluation: tagging.
One way to solve this problem is to make Havoc eager and simply use tagging on all equations that need to be part of an inference process. This imposes some ergonomic overhead, however, and is
generally lame. It means that you'd have to rewrite the equation (or equate it to a constant) anytime it was used as a value. In particular, it breaks the transitivity of equality for
conclusions.

Lazy evaluation: hinting.
A more syntactically convenient approach is to make all equations lazy and to provide hints to the compiler anytime it is unclear how to expand a form. This requires the compiler to implement
some kind of brute-force proof search over terms, and this is where hinting comes in. There are two parts to this. One is the search algorithm itself, which is memoized across compiles; the
other is the hinting process, which can be done either in code or by using the compiler shell.
