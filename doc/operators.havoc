Operator precedence and associativity | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
Havoc has customizable operator precedence, but not in the usual way. Operator precedence initially is well-defined, but because of the nature of rewriting expressions you have the ability to
change how expressions are interpreted. The precedence and associativity of each operator are determined by its last character. Here is a table of characters, going from highest to lowest
precedence:

| (application)  left   f x                     <- function application is the only instance of this operator
  ^              right  2 ^ 3
  * / %          left   2 * 3
  + -            left   2 - 3
  :              right  2 : []
  &              left   2 & 3
  |              left   2 | 3
  ∩              left   xs ∩ ys
  ∪              left   xs ∪ ys
  ∈ ∋            left   x ∈ xs
  ⊂ ⊃            left   x ⊂ y
  $              right  f $ x y
  → ↦            right  x > 0 → y
  ← ↤            left   y ← x > 0
  < > = ≠        right  2 < 3
  ≡              right  x ≡ y
  ¬              right  ¬ x
  ∧              left   x ∧ y
  ∨              left   x ∨ y
  ∃              left   x ∃ y
  ∀              left   x ∀ y
  ⋅              right  x ⋅ y

Modifying operator precedence.
It's very easy to modify operator precedence for specific kinds of expressions. For example, suppose you find yourself writing (x + y) * z very frequently and want a variant plus operator with
much higher precedence. You can write this:

| x .+ y * z = (x + y) * z ∀ x, y, ∧ z          <- Oxford comma is required for disambiguation

Now the .+ operator has higher precedence than multiplication because it will be rewritten to group first, though only when used on the left. To fully generalize this pattern, you'd want to do
something like this:

| high-precedence op =  op x (mop y z) = mop (op x y) z ∧  ∀ mop ∈ ((*), (/), (%)), x, y, ∧ z ∀ op
                        op (mop x y) z = mop x (op y z)
  high-precedence (.+)
