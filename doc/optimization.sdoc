Optimization | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
Havoc presents some interesting and pathological optimization requirements. Most of this arises from complex equation patterns that sometimes match recursive function outputs. For example,
consider this program:

| list n = n > 0 ? cons n $ list $ n - 1 : nil ∀ n
  cons n $ cons (n - 1) $ cons (n - 2) x = cons 10 x ∀ n x

Havoc is not required to optimize this at compile-time, since doing this kind of thing in general would be very time-consuming -- O(n^k), in fact, where n is the number of equations you have
and k is the number of compositions you want to explore. That said, you can inform Havoc that you want this to be optimized by working with the compiler shell directly.
