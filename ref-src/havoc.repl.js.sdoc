Havoc reference implementation REPL | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This module provides a simple REPL for Caterwaul. The REPL has a small set of utility functions that you can use to do things like loading external files or saving the equation state.

caterwaul.js_all()(function ($) {
  $.havoc.repl(argv) = link_stdin_to(handle_interaction) -se- argv *!commands.load /seq /when.argv

               -where [repl_scope            = $.havoc.scope([]),

                       read_file(name)       = require('fs').readFileSync(name, 'utf8'),

                       help_table            = capture [help  = ':help with no arguments prints a list of all REPL commands.\n:help <command> prints help for <command>.',
                                                        state = ':state prints the list of assumptions being made by the toplevel scope.\n' +
                                                                ':state <expression> prints assumptions that match <expression>.',
                                                        load  = ':load <filename> assumes all expressions in <filename>.',
                                                        clear = ':clear clears all assumptions being made by the toplevel scope.\n:clear <expression> clears matching expressions.'],

                       commands              = capture [help(c)  = c ? help_table[c.replace(/^:/, '')] : 'commands: ' + help_table /keys *[':#{x}'] /seq /re [it.join(' ')] +
                                                                                                         '\n#{help_table.help}',

                                                        state(x) = x ? repl_scope.assumptions %~![x.toString() -when- p /~match/ x] -seq -re- it.join('\n') -where [p = $.havoc.parse(x)]
                                                                     : repl_scope.assumptions *[x.toString()] -seq -re- it.join('\n'),

                                                        load(x)  = console.log('\033[1;32m[loading #{x}...]') -re-
                                                                   $.havoc.parse(x /!read_file) -re [it ? repl_scope.assume(it.flatten(',')) -re- 'assuming #{it}'
                                                                                                        : 'parse error in #{x}, and I have no useful information to help you find it'],

                                                        clear(x) = x ? 'removed these assumptions:\n#{removed_assumptions.join("\n")}' -se [repl_scope.assumptions = remaining_assumptions]
                                                                       -where [p                     = $.havoc.parse(x),
                                                                               removed_assumptions   = repl_scope.assumptions %[p /~match/ x] -seq,
                                                                               remaining_assumptions = repl_scope.assumptions %![p /~match/ x] -seq]
                                                                     : 'removed all assumptions' -se [repl_scope.assumptions = []]],

                       handle_special(s)     = '\033[1;33m#{output}\033[0;0m'
                                               -where [output = /^:(\w+)\s?(.*)/.exec(s) -re [commands[it[1]] ? commands[it[1]](it[2]) : 'unknown command: #{it[1]}\n#{commands.help()}']],

                       handle_input(s)       = /^\!/.test(s) ? repl_scope /~assume/ $.havoc.parse(s.substr(1)) :
                                               /^:/.test(s)  ? handle_special(s) :
                                                               $.havoc.parse(s) -re [it ? repl_scope(it) : "\033[1;31mcouldn't parse #{s}\033[0;0m"],

                       handle_interaction(s) = console.log('\033[1;34m%s\033[0;0m', handle_input(s).toString()) -se- prompt(),

                       prompt()              = process.stdout.write('\033[1;32mhavoc\033[1;30m :: \033[0;0m'),
                       initial_prompt()      = console.log('\033[1;32mhavoc repl\033[0;0m\n#{assuming_vs_evaluating}') -se- prompt()
                                       -where [assuming_vs_evaluating = 'type an expression to evaluate it -- for example:\n' +
                                                                        "  'foo 'bar\n" + 'precede it with ! to assume it:\n' +
                                                                        "  ! 'foo = 'bar\n" + 'type :help for more information.\n'],

                       link_stdin_to(f)      = process.stdin -se [it.on('data', f), it.setEncoding('utf8'), it.resume(), initial_prompt()]]})(caterwaul);
